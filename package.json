{
  "name": "@wingswap/wingswap-contract",
  "scripts": {
    "verify": "hardhat verify --network bsc_testnet",
    "prepublish": "yarn build",
    "copy-dts-typechain": "npx copyfiles -u 1 \"typechain/**/*.d.ts\" compiled-typechain",
    "build": "tsc -p tsconfig.cjs.json && yarn copy-dts-typechain",
    "compile": "hardhat typechain --config hardhat.config.ts",
    "remove:sol-log": "hardhat remove-logs",
    "prettier-format:default": "prettier --config .prettierrc 'deploy/**/*.ts' 'utils/**/*.ts' 'scripts/**/*.ts' 'tests/**/*.ts' --write",
    "deploy:mainnet": "hardhat --network mainnet deploy --reset",
    "deploy:testnet": "hardhat --network testnet deploy --reset",
    "test": "hardhat test --no-compile",
    "mainnet": "hardhat console --network mainnet",
    "testnet": "hardhat console --network testnet",
    "test:case": "mocha --timeout 500000 --require hardhat/register --file tests/**/* --extension ts -g",
    "prepublishOnly": "yarn compile",
    "test:unit:wingswapNFT": "hardhat test --no-compile ./tests/unit/WingSwapNFT.test.ts",
    "test:unit:shipboosterConfig": "hardhat test --no-compile ./tests/unit/ShipBoosterConfig.test.ts",
    "test:unit:wingSwapRouter": "hardhat test --no-compile ./tests/unit/WingSwapRouter.test.ts",
    "test:unit:wingSwapFactory": "hardhat test --no-compile ./tests/unit/WingSwapFactory.test.ts",
    "test:unit:masterChefV1": "hardhat test --no-compile ./tests/unit/MasterChefV1.test.ts",
    "test:unit:masterChef": "hardhat test --no-compile ./tests/unit/MasterChef.test.ts",
    "test:unit:shipbooster": "hardhat test --no-compile ./tests/unit/ShipBooster.test.ts",
    "test:unit:wingMarket": "hardhat test --no-compile ./tests/unit/WingMarket.test.ts",
    "test:unit:wingNFT": "hardhat test --no-compile ./tests/unit/WingNFT.test.ts",
    "test:unit:wingNFTOffering": "hardhat test --no-compile ./tests/unit/WingNFTOffering.test.ts",
    "test:unit:tripleSlopePriceModel": "hardhat test --no-compile ./tests/unit/TripleSlopePriceModel.test.ts",
    "test:unit:wingv2": "hardhat test --no-compile ./tests/unit/WingV2.test.ts",
    "test:e2e:masterChefV1": "hardhat test --no-compile ./tests/e2e/MasterChefV1.test.ts",
    "test:e2e:masterChef": "hardhat test --no-compile ./tests/e2e/MasterChef.test.ts",

    "deploy:testnet:mockErc20": "hardhat --network testnet deploy --no-compile --reset --tags DeployMockERC20",
    "deploy:testnet:wingSwap": "hardhat --network testnet deploy --no-compile --reset --tags DeployWingSwap",
    "deploy:testnet:masterChef": "hardhat --network testnet deploy --no-compile --reset --tags DeployMasterChef",
    "deploy:testnet:timelock": "hardhat --network testnet deploy --no-compile --reset --tags DeployTimeLock",
    "deploy:testnet:wingVault": "hardhat --network testnet deploy --no-compile --reset --tags DeployWingVault",
    "deploy:testnet:shipbooster": "hardhat --network testnet deploy --no-compile --reset --tags DeployShipBooster",
    "deploy:testnet:wingswapNFT": "hardhat --network testnet deploy --no-compile --reset --tags DeployWingSwapNFT",
    "deploy:testnet:wingMarket": "hardhat --network testnet deploy --no-compile --reset --tags DeployWingMarket",
    "deploy:testnet:wingNFT": "hardhat --network testnet deploy --no-compile --reset --tags DeployWingNFT",
    "deploy:testnet:wNativeRelayer": "hardhat --network testnet deploy --no-compile --reset --tags DeployWNativeRelayer",
    "deploy:testnet:wingNFTOffering": "hardhat --network testnet deploy --no-compile --reset --tags DeployWingNFTOffering",
    "deploy:testnet:dripbar": "hardhat --network testnet deploy --no-compile --reset --tags DeployDripBar",
    "deploy:testnet:wingV2": "hardhat --network testnet deploy --no-compile --reset --tags DeployWINGV2andStakeV2",

    "script:testnet:ownership:transferOwnerToTimelock": "hardhat --network testnet run --no-compile ./scripts/ownership/transfer_ownership_to_timelock.ts",
    "script:testnet:ownership:transferWingBeanOwnerToMasterChef": "hardhat --network testnet run --no-compile ./scripts/ownership/transfer_ownership_of_wing_bean_to_master_chef.ts",
    "script:testnet:timelock:execute": "hardhat --network testnet run --no-compile ./scripts/timelock/timelock_execution.ts",
    "script:testnet:timelock:timelock:changeDelay": "hardhat --network testnet run --no-compile ./scripts/timelock/timelock/change_delay.ts",
    "script:testnet:swap:addLiquidity": "hardhat --network testnet run --no-compile ./scripts/swap/add_liquidity.ts",
    "script:testnet:swap:getLPAddresses": "hardhat --network testnet run --no-compile ./scripts/swap/get_deterministic_lp_address.ts",
    "script:testnet:swap:setFeeto": "hardhat --network testnet run --no-compile ./scripts/swap/set_feeto_wingswap_factory.ts",
    "script:testnet:swap:createPair": "hardhat --network testnet run --no-compile ./scripts/swap/create_pair.ts",
    "script:testnet:farm:addPool": "hardhat --network testnet run --no-compile ./scripts/farm/add_pool_to_master_chef.ts",
    "script:testnet:farm:setWingPerBlock": "hardhat --network testnet run --no-compile ./scripts/farm/set_wing_per_block_to_master_chef.ts",
    "script:testnet:farm:setPool": "hardhat --network testnet run --no-compile ./scripts/farm/master_chef_set_pool.ts",
    "script:testnet:farm:setPoolAllocBps": "hardhat --network testnet run --no-compile ./scripts/farm/set_pool_alloc_bps.ts",
    "script:testnet:farm:addDripBarCampaignInfo": "hardhat --network testnet run --no-compile ./scripts/farm/add_dripbar_campaign_info.ts",
    "script:testnet:farm:addDripBarRewardInfo": "hardhat --network testnet run --no-compile ./scripts/farm/add_dripbar_reward_info.ts",
    "script:testnet:farm:timelock:addPool": "hardhat --network testnet run --no-compile ./scripts/farm/timelock/timelock_add_pool_to_master_chef.ts",
    "script:testnet:farm:timelock:setPoolAllocBps": "hardhat --network testnet run --no-compile ./scripts/farm/timelock/timelock_set_pool_alloc_bps_to_master_chef.ts",
    "script:testnet:farm:timelock:setPool": "hardhat --network testnet run --no-compile ./scripts/farm/timelock/timelock_set_pool_alloc_point_to_master_chef.ts",
    "script:testnet:farm:timelock:setBonusMultiplier": "hardhat --network testnet run --no-compile ./scripts/farm/timelock/timelock_set_bonus_multiplier_to_master_chef.ts",
    "script:testnet:farm:timelock:removeStakeTokenCaller": "hardhat --network testnet run --no-compile ./scripts/farm/timelock/timelock_remove_stake_token_caller.ts",
    "script:testnet:farm:timelock:setStakeTokenCallerAllowance": "hardhat --network testnet run --no-compile ./scripts/farm/timelock/timelock_set_stake_token_caller_allowance.ts",
    "script:testnet:farm:timelock:migrateMasterChef": "hardhat --network testnet run --no-compile ./scripts/farm/timelock/timelock_migrate_master_chef_to_v2.ts",
    "script:testnet:farm:timelock:upgradeMasterChef": "hardhat --network testnet run --no-compile ./scripts/farm/timelock/timelock_upgrade_master_chef.ts",
    "script:testnet:farm:timelock:setWingPerBlock": "hardhat --network testnet run --no-compile ./scripts/farm/timelock/timelock_set_reward_emission.ts",
    "script:testnet:farm:upgrade:masterChef": "hardhat --network testnet run --no-compile ./scripts/farm/upgrade/upgrade_master_chef.ts",
    "script:testnet:farm:validate:addPool": "hardhat --network testnet run --no-compile ./scripts/farm/validate/add_pool_to_master_chef.ts",
    "script:testnet:nft:addWingSwapNFTCategory": "hardhat --network testnet run --no-compile ./scripts/nft/wing_nft_add_category.ts",
    "script:testnet:nft:batchMintWingSwapNFT": "hardhat --network testnet run --no-compile ./scripts/nft/wing_nft_batch_mint.ts",
    "script:testnet:nft:setStakeTokenToBeBoosted": "hardhat --network testnet run --no-compile ./scripts/nft/set_stake_token_to_be_boosted.ts",
    "script:testnet:nft:setShipBoosterConfigStakeTokenShipBoosterAllowance": "hardhat --network testnet run --no-compile ./scripts/nft/shipbooster_config_set_stake_token_shipbooster_allowance.ts",
    "script:testnet:nft:setShipBoosterConfigBatchShipBoosterNFT": "hardhat --network testnet run --no-compile ./scripts/nft/shipbooster_config_set_batch_shipbooster_nft.ts",
    "script:testnet:nft:changeWingSwapNFTBaseURI": "hardhat --network testnet run --no-compile ./scripts/nft/wing_nft_change_base_uri.ts",
    "script:testnet:nft:addWingNFTCategory": "hardhat --network testnet run --no-compile ./scripts/nft/og_nft_add_category.ts",
    "script:testnet:nft:updateWingSwapNFTCategory": "hardhat --network testnet run --no-compile ./scripts/nft/wing_nft_update_category.ts",
    "script:testnet:nft:setShipBoosterConfigBatchCategories": "hardhat --network testnet run --no-compile ./scripts/nft/shipbooster_config_set_batch_category_nft.ts",
    "script:testnet:nft:setOgOwnerToken": "hardhat --network testnet run --no-compile ./scripts/nft/og_set_og_owner_token.ts",
    "script:testnet:nft:setShipBoosterConfigStakeTokenCategoryAllowance": "hardhat --network testnet run --no-compile ./scripts/nft/shipbooster_config_set_stake_token_category_allowance.ts",
    "script:testnet:nft:changeWingNFTBaseURI": "hardhat --network testnet run --no-compile ./scripts/nft/og_nft_change_base_uri.ts",
    "script:testnet:nft:timelock:setStakeTokenToBeBoosted": "hardhat --network testnet run --no-compile ./scripts/nft/timelock/timelock_set_stake_token_to_be_boosted.ts",
    "script:testnet:nft:timelock:setShipBoosterConfigStakeTokenCategoryAllowance": "hardhat --network testnet run --no-compile ./scripts/nft/timelock/timelock_shipbooster_config_set_stake_token_category_allowance.ts",
    "script:testnet:nft:timelock:upgradeShipBooster": "hardhat --network testnet run --no-compile ./scripts/nft/timelock/upgrade_shipbooster.ts",
    "script:testnet:nft:upgrade:shipbooster": "hardhat --network testnet run --no-compile ./scripts/nft/upgrade/upgrade_shipbooster.ts",
    "script:testnet:nft:upgrade:shipboosterConfig": "hardhat --network testnet run --no-compile ./scripts/nft/upgrade/upgrade_shipbooster_config.ts",
    "script:testnet:nft:upgrade:wingswapNFT": "hardhat --network testnet run --no-compile ./scripts/nft/upgrade/upgrade_wing_nft.ts",
    "script:testnet:nft:upgrade:wingNFT": "hardhat --network testnet run --no-compile ./scripts/nft/upgrade/upgrade_og_nft.ts",
    "script:testnet:nft:upgrade:ogOwnerToken": "hardhat --network testnet run --no-compile ./scripts/nft/upgrade/upgrade_og_owner_token.ts",
    "script:testnet:nft:validate:stakeTokenToBeBoosted": "hardhat --network testnet run --no-compile ./scripts/nft/validate/stake_token_to_be_boosted.ts",
    "script:testnet:nft:validate:setShipBoosterConfigStakeTokenCategoryAllowance": "hardhat --network testnet run --no-compile ./scripts/nft/validate/shipbooster_config_set_stake_token_category_allowance.ts",
    "script:testnet:market:setSupportedNFT": "hardhat --network testnet run --no-compile ./scripts/market/set_supported_nft.ts",
    "script:testnet:market:readyToSell": "hardhat --network testnet run --no-compile ./scripts/market/ready_to_sell.ts",
    "script:testnet:market:setSaleCap": "hardhat --network testnet run --no-compile ./scripts/market/set_sale_cap.ts",
    "script:testnet:market:upgrade:wingMarket": "hardhat --network testnet run --no-compile ./scripts/market/upgrade/upgrade_wing_market.ts",
    "script:testnet:market:validate:deployWingMarket": "hardhat --network testnet run --no-compile ./scripts/market/validate/deploy_wing_market.ts",
    "script:testnet:market:validate:readyToSell": "hardhat --network testnet run --no-compile ./scripts/market/validate/ready_to_sell.ts",
    "script:testnet:market:timelock:upgradeWingMarket": "hardhat --network testnet run --no-compile ./scripts/market/timelock/upgrade.ts",
    "script:testnet:wingNftOffering:readyToSell": "hardhat --network testnet run --no-compile ./scripts/og-nft-offering/ready_to_sell.ts",
    "script:testnet:wingNftOffering:upgrade:wingNFTOffering": "hardhat --network testnet run --no-compile ./scripts/og-nft-offering/upgrade/upgrade_og_nft_offering.ts",
    "script:testnet:wingNftOffering:validate:deployWingNFTOffering": "hardhat --network testnet run --no-compile ./scripts/og-nft-offering/validate/deploy_og_nft_offering.ts",
    "script:testnet:wingNftOffering:validate:readyToSell": "hardhat --network testnet run --no-compile ./scripts/og-nft-offering/validate/ready_to_sell.ts",
    "script:testnet:wingNftOffering:timelock:upgradeWingNFTOffering": "hardhat --network testnet run --no-compile ./scripts/og-nft-offering/timelock/upgrade.ts",
    "script:testnet:wingNftOffering:timelock:setBuyLimitCount": "hardhat --network testnet run --no-compile ./scripts/og-nft-offering/timelock/timelock_set_buy_limit_count.ts",
    "script:testnetfork:wingNftOffering:e2e:buyAllNFT": "hardhat --network testnetfork run --no-compile ./scripts/og-nft-offering/e2e/buy_all_nft.ts"
  },
  "version": "2.0.0-rc.2",
  "main": "index.js",
  "license": "GPL-3.0",
  "devDependencies": {
    "@eth-optimism/smock": "^1.1.10",
    "@ethersproject/bignumber": "^5.0.14",
    "@latteswap/latteswap-contract-config": "^1.1.0-rc.2",
    "@nomiclabs/ethereumjs-vm": "^4.2.2",
    "@nomiclabs/hardhat-ethers": "^2.0.2",
    "@nomiclabs/hardhat-etherscan": "^2.1.1",
    "@nomiclabs/hardhat-waffle": "^2.0.1",
    "@openzeppelin/contracts": "^3.4.2",
    "@openzeppelin/contracts-upgradeable": "^3.4.2",
    "@openzeppelin/hardhat-upgrades": "^1.9.0",
    "@typechain/ethers-v5": "^5.0.0",
    "@types/chai": "^4.2.15",
    "@types/mocha": "^8.2.2",
    "@types/node": "^14.14.28",
    "@typescript-eslint/eslint-plugin": "^4.29.2",
    "@typescript-eslint/parser": "^4.29.2",
    "chai": "^4.3.0",
    "chai-bn": "^0.2.1",
    "dotenv": "^8.2.0",
    "eslint": "^7.32.0",
    "eslint-config-prettier": "^8.3.0",
    "eslint-plugin-prettier": "^3.4.1",
    "ethereum-waffle": "^3.2.2",
    "ethereumjs-util": "^7.0.10",
    "ethers": "^5.0.31",
    "fp-ts": "^2.11.4",
    "hardhat": "2.5.0",
    "hardhat-deploy": "^0.7.0-beta.45",
    "hardhat-log-remover": "^2.0.2",
    "hardhat-typechain": "^0.3.5",
    "prettier": "^2.3.2",
    "prettier-plugin-solidity": "^1.0.0-beta.17",
    "solhint": "^3.3.6",
    "solhint-plugin-prettier": "^0.0.5",
    "ts-generator": "^0.1.1",
    "ts-node": "^9.1.1",
    "typechain": "^4.0.1",
    "typescript": "^4.1.5"
  },
  "files": [
    "typechain",
    "artifacts",
    "contracts",
    "compiled-typechain"
  ]
}
